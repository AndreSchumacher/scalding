// following were autogenerated by scalding-core/codegen/scalding_gen.rb at Fri May 23 15:49:51 -0700 2014 do not edit
package com.twitter.scalding
import cascading.tuple.Tuple
import cascading.tuple.TupleEntry

trait GeneratedTupleConverters extends LowPriorityTupleConverters {

  implicit def tuple1Converter[A](implicit
    gA : TupleGetter[A]): TupleConverter[Tuple1[A]] = new TupleConverter[Tuple1[A]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple1(gA.get(tup, 0))
      }
      def arity = 1
  }

  implicit def tuple2Converter[A,B](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B]): TupleConverter[Tuple2[A,B]] = new TupleConverter[Tuple2[A,B]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple2(gA.get(tup, 0),
         gB.get(tup, 1))
      }
      def arity = 2
  }

  implicit def tuple3Converter[A,B,C](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C]): TupleConverter[Tuple3[A,B,C]] = new TupleConverter[Tuple3[A,B,C]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple3(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2))
      }
      def arity = 3
  }

  implicit def tuple4Converter[A,B,C,D](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D]): TupleConverter[Tuple4[A,B,C,D]] = new TupleConverter[Tuple4[A,B,C,D]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple4(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3))
      }
      def arity = 4
  }

  implicit def tuple5Converter[A,B,C,D,E](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E]): TupleConverter[Tuple5[A,B,C,D,E]] = new TupleConverter[Tuple5[A,B,C,D,E]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple5(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4))
      }
      def arity = 5
  }

  implicit def tuple6Converter[A,B,C,D,E,F](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F]): TupleConverter[Tuple6[A,B,C,D,E,F]] = new TupleConverter[Tuple6[A,B,C,D,E,F]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple6(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5))
      }
      def arity = 6
  }

  implicit def tuple7Converter[A,B,C,D,E,F,G](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G]): TupleConverter[Tuple7[A,B,C,D,E,F,G]] = new TupleConverter[Tuple7[A,B,C,D,E,F,G]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple7(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6))
      }
      def arity = 7
  }

  implicit def tuple8Converter[A,B,C,D,E,F,G,H](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H]): TupleConverter[Tuple8[A,B,C,D,E,F,G,H]] = new TupleConverter[Tuple8[A,B,C,D,E,F,G,H]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple8(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7))
      }
      def arity = 8
  }

  implicit def tuple9Converter[A,B,C,D,E,F,G,H,I](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I]): TupleConverter[Tuple9[A,B,C,D,E,F,G,H,I]] = new TupleConverter[Tuple9[A,B,C,D,E,F,G,H,I]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple9(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8))
      }
      def arity = 9
  }

  implicit def tuple10Converter[A,B,C,D,E,F,G,H,I,J](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J]): TupleConverter[Tuple10[A,B,C,D,E,F,G,H,I,J]] = new TupleConverter[Tuple10[A,B,C,D,E,F,G,H,I,J]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple10(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9))
      }
      def arity = 10
  }

  implicit def tuple11Converter[A,B,C,D,E,F,G,H,I,J,K](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K]): TupleConverter[Tuple11[A,B,C,D,E,F,G,H,I,J,K]] = new TupleConverter[Tuple11[A,B,C,D,E,F,G,H,I,J,K]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple11(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10))
      }
      def arity = 11
  }

  implicit def tuple12Converter[A,B,C,D,E,F,G,H,I,J,K,L](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L]): TupleConverter[Tuple12[A,B,C,D,E,F,G,H,I,J,K,L]] = new TupleConverter[Tuple12[A,B,C,D,E,F,G,H,I,J,K,L]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple12(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11))
      }
      def arity = 12
  }

  implicit def tuple13Converter[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M]): TupleConverter[Tuple13[A,B,C,D,E,F,G,H,I,J,K,L,M]] = new TupleConverter[Tuple13[A,B,C,D,E,F,G,H,I,J,K,L,M]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple13(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12))
      }
      def arity = 13
  }

  implicit def tuple14Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N]): TupleConverter[Tuple14[A,B,C,D,E,F,G,H,I,J,K,L,M,N]] = new TupleConverter[Tuple14[A,B,C,D,E,F,G,H,I,J,K,L,M,N]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple14(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13))
      }
      def arity = 14
  }

  implicit def tuple15Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O]): TupleConverter[Tuple15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]] = new TupleConverter[Tuple15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple15(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14))
      }
      def arity = 15
  }

  implicit def tuple16Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P]): TupleConverter[Tuple16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]] = new TupleConverter[Tuple16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple16(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15))
      }
      def arity = 16
  }

  implicit def tuple17Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q]): TupleConverter[Tuple17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]] = new TupleConverter[Tuple17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple17(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16))
      }
      def arity = 17
  }

  implicit def tuple18Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R]): TupleConverter[Tuple18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]] = new TupleConverter[Tuple18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple18(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17))
      }
      def arity = 18
  }

  implicit def tuple19Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R],
    gS : TupleGetter[S]): TupleConverter[Tuple19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]] = new TupleConverter[Tuple19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple19(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17),
         gS.get(tup, 18))
      }
      def arity = 19
  }

  implicit def tuple20Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R],
    gS : TupleGetter[S],
    gT : TupleGetter[T]): TupleConverter[Tuple20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]] = new TupleConverter[Tuple20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple20(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17),
         gS.get(tup, 18),
         gT.get(tup, 19))
      }
      def arity = 20
  }

  implicit def tuple21Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R],
    gS : TupleGetter[S],
    gT : TupleGetter[T],
    gU : TupleGetter[U]): TupleConverter[Tuple21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]] = new TupleConverter[Tuple21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple21(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17),
         gS.get(tup, 18),
         gT.get(tup, 19),
         gU.get(tup, 20))
      }
      def arity = 21
  }

  implicit def tuple22Converter[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit
    gA : TupleGetter[A],
    gB : TupleGetter[B],
    gC : TupleGetter[C],
    gD : TupleGetter[D],
    gE : TupleGetter[E],
    gF : TupleGetter[F],
    gG : TupleGetter[G],
    gH : TupleGetter[H],
    gI : TupleGetter[I],
    gJ : TupleGetter[J],
    gK : TupleGetter[K],
    gL : TupleGetter[L],
    gM : TupleGetter[M],
    gN : TupleGetter[N],
    gO : TupleGetter[O],
    gP : TupleGetter[P],
    gQ : TupleGetter[Q],
    gR : TupleGetter[R],
    gS : TupleGetter[S],
    gT : TupleGetter[T],
    gU : TupleGetter[U],
    gV : TupleGetter[V]): TupleConverter[Tuple22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]] = new TupleConverter[Tuple22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]]{
      def apply(te : TupleEntry) = {
        val tup = te.getTuple
        Tuple22(gA.get(tup, 0),
         gB.get(tup, 1),
         gC.get(tup, 2),
         gD.get(tup, 3),
         gE.get(tup, 4),
         gF.get(tup, 5),
         gG.get(tup, 6),
         gH.get(tup, 7),
         gI.get(tup, 8),
         gJ.get(tup, 9),
         gK.get(tup, 10),
         gL.get(tup, 11),
         gM.get(tup, 12),
         gN.get(tup, 13),
         gO.get(tup, 14),
         gP.get(tup, 15),
         gQ.get(tup, 16),
         gR.get(tup, 17),
         gS.get(tup, 18),
         gT.get(tup, 19),
         gU.get(tup, 20),
         gV.get(tup, 21))
      }
      def arity = 22
  }
}
trait GeneratedTupleSetters extends LowPriorityTupleSetters {

  implicit def tup1Setter[A:Manifest]: TupleSetter[Tuple1[A]] = new TupleSetter[Tuple1[A]] {
    override def apply(arg: Tuple1[A]) = {
      val tup = Tuple.size(1)
      tup.set(0, arg._1)
      tup
    }

    override def arity = 1
  }

  implicit def tup2Setter[A:Manifest,B:Manifest]: TupleSetter[Tuple2[A,B]] = new TupleSetter[Tuple2[A,B]] {
    override def apply(arg: Tuple2[A,B]) = {
      val tup = Tuple.size(2)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup
    }

    override def arity = 2
  }

  implicit def tup3Setter[A:Manifest,B:Manifest,C:Manifest]: TupleSetter[Tuple3[A,B,C]] = new TupleSetter[Tuple3[A,B,C]] {
    override def apply(arg: Tuple3[A,B,C]) = {
      val tup = Tuple.size(3)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup
    }

    override def arity = 3
  }

  implicit def tup4Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest]: TupleSetter[Tuple4[A,B,C,D]] = new TupleSetter[Tuple4[A,B,C,D]] {
    override def apply(arg: Tuple4[A,B,C,D]) = {
      val tup = Tuple.size(4)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup
    }

    override def arity = 4
  }

  implicit def tup5Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest]: TupleSetter[Tuple5[A,B,C,D,E]] = new TupleSetter[Tuple5[A,B,C,D,E]] {
    override def apply(arg: Tuple5[A,B,C,D,E]) = {
      val tup = Tuple.size(5)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup
    }

    override def arity = 5
  }

  implicit def tup6Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest]: TupleSetter[Tuple6[A,B,C,D,E,F]] = new TupleSetter[Tuple6[A,B,C,D,E,F]] {
    override def apply(arg: Tuple6[A,B,C,D,E,F]) = {
      val tup = Tuple.size(6)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup
    }

    override def arity = 6
  }

  implicit def tup7Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest]: TupleSetter[Tuple7[A,B,C,D,E,F,G]] = new TupleSetter[Tuple7[A,B,C,D,E,F,G]] {
    override def apply(arg: Tuple7[A,B,C,D,E,F,G]) = {
      val tup = Tuple.size(7)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup
    }

    override def arity = 7
  }

  implicit def tup8Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest]: TupleSetter[Tuple8[A,B,C,D,E,F,G,H]] = new TupleSetter[Tuple8[A,B,C,D,E,F,G,H]] {
    override def apply(arg: Tuple8[A,B,C,D,E,F,G,H]) = {
      val tup = Tuple.size(8)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup
    }

    override def arity = 8
  }

  implicit def tup9Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest]: TupleSetter[Tuple9[A,B,C,D,E,F,G,H,I]] = new TupleSetter[Tuple9[A,B,C,D,E,F,G,H,I]] {
    override def apply(arg: Tuple9[A,B,C,D,E,F,G,H,I]) = {
      val tup = Tuple.size(9)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup
    }

    override def arity = 9
  }

  implicit def tup10Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest]: TupleSetter[Tuple10[A,B,C,D,E,F,G,H,I,J]] = new TupleSetter[Tuple10[A,B,C,D,E,F,G,H,I,J]] {
    override def apply(arg: Tuple10[A,B,C,D,E,F,G,H,I,J]) = {
      val tup = Tuple.size(10)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup
    }

    override def arity = 10
  }

  implicit def tup11Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest]: TupleSetter[Tuple11[A,B,C,D,E,F,G,H,I,J,K]] = new TupleSetter[Tuple11[A,B,C,D,E,F,G,H,I,J,K]] {
    override def apply(arg: Tuple11[A,B,C,D,E,F,G,H,I,J,K]) = {
      val tup = Tuple.size(11)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup
    }

    override def arity = 11
  }

  implicit def tup12Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest]: TupleSetter[Tuple12[A,B,C,D,E,F,G,H,I,J,K,L]] = new TupleSetter[Tuple12[A,B,C,D,E,F,G,H,I,J,K,L]] {
    override def apply(arg: Tuple12[A,B,C,D,E,F,G,H,I,J,K,L]) = {
      val tup = Tuple.size(12)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup
    }

    override def arity = 12
  }

  implicit def tup13Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest]: TupleSetter[Tuple13[A,B,C,D,E,F,G,H,I,J,K,L,M]] = new TupleSetter[Tuple13[A,B,C,D,E,F,G,H,I,J,K,L,M]] {
    override def apply(arg: Tuple13[A,B,C,D,E,F,G,H,I,J,K,L,M]) = {
      val tup = Tuple.size(13)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup
    }

    override def arity = 13
  }

  implicit def tup14Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest]: TupleSetter[Tuple14[A,B,C,D,E,F,G,H,I,J,K,L,M,N]] = new TupleSetter[Tuple14[A,B,C,D,E,F,G,H,I,J,K,L,M,N]] {
    override def apply(arg: Tuple14[A,B,C,D,E,F,G,H,I,J,K,L,M,N]) = {
      val tup = Tuple.size(14)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup
    }

    override def arity = 14
  }

  implicit def tup15Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest,O:Manifest]: TupleSetter[Tuple15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]] = new TupleSetter[Tuple15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]] {
    override def apply(arg: Tuple15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]) = {
      val tup = Tuple.size(15)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup.set(14, arg._15)
      tup
    }

    override def arity = 15
  }

  implicit def tup16Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest,O:Manifest,P:Manifest]: TupleSetter[Tuple16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]] = new TupleSetter[Tuple16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]] {
    override def apply(arg: Tuple16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]) = {
      val tup = Tuple.size(16)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup.set(14, arg._15)
      tup.set(15, arg._16)
      tup
    }

    override def arity = 16
  }

  implicit def tup17Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest,O:Manifest,P:Manifest,Q:Manifest]: TupleSetter[Tuple17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]] = new TupleSetter[Tuple17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]] {
    override def apply(arg: Tuple17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]) = {
      val tup = Tuple.size(17)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup.set(14, arg._15)
      tup.set(15, arg._16)
      tup.set(16, arg._17)
      tup
    }

    override def arity = 17
  }

  implicit def tup18Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest,O:Manifest,P:Manifest,Q:Manifest,R:Manifest]: TupleSetter[Tuple18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]] = new TupleSetter[Tuple18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]] {
    override def apply(arg: Tuple18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]) = {
      val tup = Tuple.size(18)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup.set(14, arg._15)
      tup.set(15, arg._16)
      tup.set(16, arg._17)
      tup.set(17, arg._18)
      tup
    }

    override def arity = 18
  }

  implicit def tup19Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest,O:Manifest,P:Manifest,Q:Manifest,R:Manifest,S:Manifest]: TupleSetter[Tuple19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]] = new TupleSetter[Tuple19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]] {
    override def apply(arg: Tuple19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]) = {
      val tup = Tuple.size(19)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup.set(14, arg._15)
      tup.set(15, arg._16)
      tup.set(16, arg._17)
      tup.set(17, arg._18)
      tup.set(18, arg._19)
      tup
    }

    override def arity = 19
  }

  implicit def tup20Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest,O:Manifest,P:Manifest,Q:Manifest,R:Manifest,S:Manifest,T:Manifest]: TupleSetter[Tuple20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]] = new TupleSetter[Tuple20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]] {
    override def apply(arg: Tuple20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]) = {
      val tup = Tuple.size(20)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup.set(14, arg._15)
      tup.set(15, arg._16)
      tup.set(16, arg._17)
      tup.set(17, arg._18)
      tup.set(18, arg._19)
      tup.set(19, arg._20)
      tup
    }

    override def arity = 20
  }

  implicit def tup21Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest,O:Manifest,P:Manifest,Q:Manifest,R:Manifest,S:Manifest,T:Manifest,U:Manifest]: TupleSetter[Tuple21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]] = new TupleSetter[Tuple21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]] {
    override def apply(arg: Tuple21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]) = {
      val tup = Tuple.size(21)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup.set(14, arg._15)
      tup.set(15, arg._16)
      tup.set(16, arg._17)
      tup.set(17, arg._18)
      tup.set(18, arg._19)
      tup.set(19, arg._20)
      tup.set(20, arg._21)
      tup
    }

    override def arity = 21
  }

  implicit def tup22Setter[A:Manifest,B:Manifest,C:Manifest,D:Manifest,E:Manifest,F:Manifest,G:Manifest,H:Manifest,I:Manifest,J:Manifest,K:Manifest,L:Manifest,M:Manifest,N:Manifest,O:Manifest,P:Manifest,Q:Manifest,R:Manifest,S:Manifest,T:Manifest,U:Manifest,V:Manifest]: TupleSetter[Tuple22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]] = new TupleSetter[Tuple22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]] {
    override def apply(arg: Tuple22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]) = {
      val tup = Tuple.size(22)
      tup.set(0, arg._1)
      tup.set(1, arg._2)
      tup.set(2, arg._3)
      tup.set(3, arg._4)
      tup.set(4, arg._5)
      tup.set(5, arg._6)
      tup.set(6, arg._7)
      tup.set(7, arg._8)
      tup.set(8, arg._9)
      tup.set(9, arg._10)
      tup.set(10, arg._11)
      tup.set(11, arg._12)
      tup.set(12, arg._13)
      tup.set(13, arg._14)
      tup.set(14, arg._15)
      tup.set(15, arg._16)
      tup.set(16, arg._17)
      tup.set(17, arg._18)
      tup.set(18, arg._19)
      tup.set(19, arg._20)
      tup.set(20, arg._21)
      tup.set(21, arg._22)
      tup
    }

    override def arity = 22
  }
}
// end of autogenerated
